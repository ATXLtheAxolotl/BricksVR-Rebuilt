using Normal.Realtime;
using Normal.Realtime.Serialization;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RealtimeModel]
public partial class AvatarNicknameModel
{
    [RealtimeProperty(1, true, true)]
    private string _nickname;

    [RealtimeProperty(2, true, true)]
    private string _shortId;

    [RealtimeProperty(3, true, true)]
    private int _primaryAvatarColor;

    [RealtimeProperty(4, true, true)]
    private int _secondaryAvatarColor;

    [RealtimeProperty(5, true, true)]
    private int _avatarEyes;

    [RealtimeProperty(6, true, true)]
    private int _avatarMouth;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class AvatarNicknameModel : RealtimeModel {
    public string nickname {
        get {
            return _nicknameProperty.value;
        }
        set {
            if (_nicknameProperty.value == value) return;
            _nicknameProperty.value = value;
            InvalidateReliableLength();
            FireNicknameDidChange(value);
        }
    }
    
    public string shortId {
        get {
            return _shortIdProperty.value;
        }
        set {
            if (_shortIdProperty.value == value) return;
            _shortIdProperty.value = value;
            InvalidateReliableLength();
            FireShortIdDidChange(value);
        }
    }
    
    public int primaryAvatarColor {
        get {
            return _primaryAvatarColorProperty.value;
        }
        set {
            if (_primaryAvatarColorProperty.value == value) return;
            _primaryAvatarColorProperty.value = value;
            InvalidateReliableLength();
            FirePrimaryAvatarColorDidChange(value);
        }
    }
    
    public int secondaryAvatarColor {
        get {
            return _secondaryAvatarColorProperty.value;
        }
        set {
            if (_secondaryAvatarColorProperty.value == value) return;
            _secondaryAvatarColorProperty.value = value;
            InvalidateReliableLength();
            FireSecondaryAvatarColorDidChange(value);
        }
    }
    
    public int avatarEyes {
        get {
            return _avatarEyesProperty.value;
        }
        set {
            if (_avatarEyesProperty.value == value) return;
            _avatarEyesProperty.value = value;
            InvalidateReliableLength();
            FireAvatarEyesDidChange(value);
        }
    }
    
    public int avatarMouth {
        get {
            return _avatarMouthProperty.value;
        }
        set {
            if (_avatarMouthProperty.value == value) return;
            _avatarMouthProperty.value = value;
            InvalidateReliableLength();
            FireAvatarMouthDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(AvatarNicknameModel model, T value);
    public event PropertyChangedHandler<string> nicknameDidChange;
    public event PropertyChangedHandler<string> shortIdDidChange;
    public event PropertyChangedHandler<int> primaryAvatarColorDidChange;
    public event PropertyChangedHandler<int> secondaryAvatarColorDidChange;
    public event PropertyChangedHandler<int> avatarEyesDidChange;
    public event PropertyChangedHandler<int> avatarMouthDidChange;
    
    public enum PropertyID : uint {
        Nickname = 1,
        ShortId = 2,
        PrimaryAvatarColor = 3,
        SecondaryAvatarColor = 4,
        AvatarEyes = 5,
        AvatarMouth = 6,
    }
    
    #region Properties
    
    private ReliableProperty<string> _nicknameProperty;
    
    private ReliableProperty<string> _shortIdProperty;
    
    private ReliableProperty<int> _primaryAvatarColorProperty;
    
    private ReliableProperty<int> _secondaryAvatarColorProperty;
    
    private ReliableProperty<int> _avatarEyesProperty;
    
    private ReliableProperty<int> _avatarMouthProperty;
    
    #endregion
    
    public AvatarNicknameModel() : base(null) {
        _nicknameProperty = new ReliableProperty<string>(1, _nickname);
        _shortIdProperty = new ReliableProperty<string>(2, _shortId);
        _primaryAvatarColorProperty = new ReliableProperty<int>(3, _primaryAvatarColor);
        _secondaryAvatarColorProperty = new ReliableProperty<int>(4, _secondaryAvatarColor);
        _avatarEyesProperty = new ReliableProperty<int>(5, _avatarEyes);
        _avatarMouthProperty = new ReliableProperty<int>(6, _avatarMouth);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _nicknameProperty.UnsubscribeCallback();
        _shortIdProperty.UnsubscribeCallback();
        _primaryAvatarColorProperty.UnsubscribeCallback();
        _secondaryAvatarColorProperty.UnsubscribeCallback();
        _avatarEyesProperty.UnsubscribeCallback();
        _avatarMouthProperty.UnsubscribeCallback();
    }
    
    private void FireNicknameDidChange(string value) {
        try {
            nicknameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireShortIdDidChange(string value) {
        try {
            shortIdDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePrimaryAvatarColorDidChange(int value) {
        try {
            primaryAvatarColorDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireSecondaryAvatarColorDidChange(int value) {
        try {
            secondaryAvatarColorDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireAvatarEyesDidChange(int value) {
        try {
            avatarEyesDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireAvatarMouthDidChange(int value) {
        try {
            avatarMouthDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _nicknameProperty.WriteLength(context);
        length += _shortIdProperty.WriteLength(context);
        length += _primaryAvatarColorProperty.WriteLength(context);
        length += _secondaryAvatarColorProperty.WriteLength(context);
        length += _avatarEyesProperty.WriteLength(context);
        length += _avatarMouthProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _nicknameProperty.Write(stream, context);
        writes |= _shortIdProperty.Write(stream, context);
        writes |= _primaryAvatarColorProperty.Write(stream, context);
        writes |= _secondaryAvatarColorProperty.Write(stream, context);
        writes |= _avatarEyesProperty.Write(stream, context);
        writes |= _avatarMouthProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Nickname: {
                    changed = _nicknameProperty.Read(stream, context);
                    if (changed) FireNicknameDidChange(nickname);
                    break;
                }
                case (uint) PropertyID.ShortId: {
                    changed = _shortIdProperty.Read(stream, context);
                    if (changed) FireShortIdDidChange(shortId);
                    break;
                }
                case (uint) PropertyID.PrimaryAvatarColor: {
                    changed = _primaryAvatarColorProperty.Read(stream, context);
                    if (changed) FirePrimaryAvatarColorDidChange(primaryAvatarColor);
                    break;
                }
                case (uint) PropertyID.SecondaryAvatarColor: {
                    changed = _secondaryAvatarColorProperty.Read(stream, context);
                    if (changed) FireSecondaryAvatarColorDidChange(secondaryAvatarColor);
                    break;
                }
                case (uint) PropertyID.AvatarEyes: {
                    changed = _avatarEyesProperty.Read(stream, context);
                    if (changed) FireAvatarEyesDidChange(avatarEyes);
                    break;
                }
                case (uint) PropertyID.AvatarMouth: {
                    changed = _avatarMouthProperty.Read(stream, context);
                    if (changed) FireAvatarMouthDidChange(avatarMouth);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _nickname = nickname;
        _shortId = shortId;
        _primaryAvatarColor = primaryAvatarColor;
        _secondaryAvatarColor = secondaryAvatarColor;
        _avatarEyes = avatarEyes;
        _avatarMouth = avatarMouth;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
