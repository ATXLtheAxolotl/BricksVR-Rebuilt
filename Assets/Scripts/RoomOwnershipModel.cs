using Normal.Realtime;
using Normal.Realtime.Serialization;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RealtimeModel]
public partial class RoomOwnershipModel
{
    // [RealtimeProperty(1, true, false)]
    // private string _ownerIdPrefix;

    [RealtimeProperty(2, true, true)]
    private bool _locked;

    [RealtimeProperty(3, true, true)]
    private bool _lowGravity;

    [RealtimeProperty(4, true, true)]
    private bool _blockedFromMovingThroughBricks;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class RoomOwnershipModel : RealtimeModel {
    public bool locked {
        get {
            return _lockedProperty.value;
        }
        set {
            if (_lockedProperty.value == value) return;
            _lockedProperty.value = value;
            InvalidateReliableLength();
            FireLockedDidChange(value);
        }
    }
    
    public bool lowGravity {
        get {
            return _lowGravityProperty.value;
        }
        set {
            if (_lowGravityProperty.value == value) return;
            _lowGravityProperty.value = value;
            InvalidateReliableLength();
            FireLowGravityDidChange(value);
        }
    }
    
    public bool blockedFromMovingThroughBricks {
        get {
            return _blockedFromMovingThroughBricksProperty.value;
        }
        set {
            if (_blockedFromMovingThroughBricksProperty.value == value) return;
            _blockedFromMovingThroughBricksProperty.value = value;
            InvalidateReliableLength();
            FireBlockedFromMovingThroughBricksDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(RoomOwnershipModel model, T value);
    public event PropertyChangedHandler<bool> lockedDidChange;
    public event PropertyChangedHandler<bool> lowGravityDidChange;
    public event PropertyChangedHandler<bool> blockedFromMovingThroughBricksDidChange;
    
    public enum PropertyID : uint {
        Locked = 2,
        LowGravity = 3,
        BlockedFromMovingThroughBricks = 4,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _lockedProperty;
    
    private ReliableProperty<bool> _lowGravityProperty;
    
    private ReliableProperty<bool> _blockedFromMovingThroughBricksProperty;
    
    #endregion
    
    public RoomOwnershipModel() : base(null) {
        _lockedProperty = new ReliableProperty<bool>(2, _locked);
        _lowGravityProperty = new ReliableProperty<bool>(3, _lowGravity);
        _blockedFromMovingThroughBricksProperty = new ReliableProperty<bool>(4, _blockedFromMovingThroughBricks);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _lockedProperty.UnsubscribeCallback();
        _lowGravityProperty.UnsubscribeCallback();
        _blockedFromMovingThroughBricksProperty.UnsubscribeCallback();
    }
    
    private void FireLockedDidChange(bool value) {
        try {
            lockedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireLowGravityDidChange(bool value) {
        try {
            lowGravityDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBlockedFromMovingThroughBricksDidChange(bool value) {
        try {
            blockedFromMovingThroughBricksDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _lockedProperty.WriteLength(context);
        length += _lowGravityProperty.WriteLength(context);
        length += _blockedFromMovingThroughBricksProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _lockedProperty.Write(stream, context);
        writes |= _lowGravityProperty.Write(stream, context);
        writes |= _blockedFromMovingThroughBricksProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Locked: {
                    changed = _lockedProperty.Read(stream, context);
                    if (changed) FireLockedDidChange(locked);
                    break;
                }
                case (uint) PropertyID.LowGravity: {
                    changed = _lowGravityProperty.Read(stream, context);
                    if (changed) FireLowGravityDidChange(lowGravity);
                    break;
                }
                case (uint) PropertyID.BlockedFromMovingThroughBricks: {
                    changed = _blockedFromMovingThroughBricksProperty.Read(stream, context);
                    if (changed) FireBlockedFromMovingThroughBricksDidChange(blockedFromMovingThroughBricks);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _locked = locked;
        _lowGravity = lowGravity;
        _blockedFromMovingThroughBricks = blockedFromMovingThroughBricks;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
